import { Application, Router, oakCors, dotenvConfig, Status } from "../deps.ts";
import { serve } from "https://deno.land/std@0.192.0/http/server.ts";
import { Client } from "https://deno.land/x/postgres@v0.17.0/mod.ts";
import { hashPassword, verifyPassword } from "../utils/passwordUtils.ts";

// ==================== CONFIGURATION ====================

// Charger les variables d'environnement
const env = await dotenvConfig({ export: true });
const PORT = parseInt(env.PORT || "3000");
const WS_PORT = 3001;
const FRONTEND_URL = env.FRONTEND_URL || "http://localhost:8080";

// Configuration PostgreSQL
export const db = new Client({
  user: env.DB_USER || "postgres",
  password: env.DB_PASSWORD || "1234",
  database: env.DB_NAME || "postgres",
  hostname: env.DB_HOST || "localhost",
  port: parseInt(env.DB_PORT || "5432"),
  applicationName: "skribble-game",
  connection: { attempts: 1 },
  tls: false
});

// ==================== TYPES ====================

interface Player {
  id: string;           // ID temporaire pour WebSocket
  username: string;
  score: number;
  isDrawing: boolean;
  userId?: number;      // ID de la base de donn√©es users
}

interface GameRoom {
  players: Map<string, Player>;
  currentWord: string | null;
  currentDrawer: string | null;
  gameState: 'waiting' | 'playing' | 'roundEnd';
  timeLeft: number;
  timerInterval?: number;
  totalRounds: number;
  currentRound: number;
  gameCreator: string | null;
}

// ==================== CONNEXION BASE DE DONN√âES ====================

try {
  await db.connect();
  console.log("‚úÖ Base de donn√©es connect√©e");
} catch (error) {
  console.error("‚ùå Erreur connexion DB:", error);
}

// ==================== VARIABLES GLOBALES ====================

const gameRoom: GameRoom = {
  players: new Map(),
  currentWord: null,
  currentDrawer: null,
  gameState: 'waiting',
  timeLeft: 60,
  totalRounds: 2,
  currentRound: 0,
  gameCreator: null
};

const connectedClients = new Map<WebSocket, Player>();

var activityLog = [];
const MAX_LOG_ENTRIES = 50;

// ==================== CONFIGURATION EXPRESS ====================

const app = new Application();
const router = new Router();

// Configuration CORS
app.use(oakCors({
  origin: FRONTEND_URL, // Plus s√©curis√© que "*"
  methods: ["GET", "POST", "PUT", "DELETE", "OPTIONS"],
  allowedHeaders: ["Content-Type", "Authorization", "X-Admin-Username"], // Ajoutez X-Admin-Username ici
  credentials: true
}));

// ==================== ROUTES D'AUTHENTIFICATION ====================

// Inscription
router.post("/api/register", async (ctx) => {
  try {
    const { username, password } = await ctx.request.body.json();
    
    if (!username || !password) {
      ctx.response.status = 400;
      ctx.response.body = { error: "Nom d'utilisateur et mot de passe requis" };
      return;
    }
    
    // Connexion DB
    if (!db.connected) await db.connect();
    
    // Cr√©er table users si n√©cessaire
    await db.queryObject(`
      CREATE TABLE IF NOT EXISTS users (
        id SERIAL PRIMARY KEY,
        username VARCHAR(50) UNIQUE NOT NULL,
        password VARCHAR(100) NOT NULL,
        isadmin BOOLEAN DEFAULT false,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      )
    `);
    
    // V√©rifier si l'utilisateur existe
    const userExists = await db.queryObject(
      "SELECT * FROM users WHERE username = $1", [username]
    );
    
    if (userExists.rows.length > 0) {
      ctx.response.status = 400;
      ctx.response.body = { error: "Ce nom d'utilisateur est d√©j√† utilis√©" };
      return;
    }
    
    // Hacher le mot de passe et ins√©rer
    const hashedPassword = await hashPassword(password);
    const result = await db.queryObject(
      "INSERT INTO users (username, password, isadmin) VALUES ($1, $2, $3) RETURNING id, username, isadmin",
      [username, hashedPassword, false]
    );
    
    ctx.response.status = 201;
    ctx.response.body = { 
      message: "Utilisateur cr√©√© avec succ√®s",
      user: result.rows[0]
    };
    
  } catch (error) {
    console.error("Erreur inscription:", error);
    ctx.response.status = 500;
    ctx.response.body = { error: "Erreur serveur lors de l'inscription" };
  }
});

// Connexion
router.post("/api/login", async (ctx) => {
  try {
    const { username, password } = await ctx.request.body.json();
    
    if (!username || !password) {
      ctx.response.status = 400;
      ctx.response.body = { error: "Nom d'utilisateur et mot de passe requis" };
      return;
    }
    
    // Connexion DB
    if (!db.connected) await db.connect();
    
    // Chercher l'utilisateur
    const userResult = await db.queryObject(
      "SELECT id, username, password, isadmin FROM users WHERE username = $1",
      [username]    
    );
    
    if (userResult.rows.length === 0) {
      ctx.response.status = 401;
      ctx.response.body = { error: "Nom d'utilisateur ou mot de passe incorrect" };
      return;
    }
    
    const user = userResult.rows[0];
    console.log("üîç Raw user from DB:", user);
    console.log("üîç user.isadmin:", user.isadmin);
    console.log("üîç typeof user.isadmin:", typeof user.isadmin);
    
    // V√©rifier le mot de passe
    const isPasswordValid = await verifyPassword(password, user.password);
    
    if (!isPasswordValid) {
      ctx.response.status = 401;
      ctx.response.body = { error: "Nom d'utilisateur ou mot de passe incorrect" };
      return;
    }

    // Journaliser la connexion r√©ussie
    logConnection(username);    

    ctx.response.status = 200;
    ctx.response.body = {
      success: true,
      message: "Connexion r√©ussie",
      user: { id: user.id, username: user.username, isadmin : user.isadmin }
    };
    
  } catch (error) {
    console.error("Erreur connexion:", error);
    ctx.response.status = 500;
    ctx.response.body = { error: "Erreur serveur lors de la connexion" };
  }
});

// Route pour se d√©connecter
router.post("/api/logout", async (ctx) => {
    console.log("üö™ Requ√™te de d√©connexion re√ßue");
    
    try {
        // Lire le body de la requ√™te
        const body = await ctx.request.body.json();
        console.log("üì• Body re√ßu:", body);
        
        const { username } = body;
        console.log("üë§ Username √† d√©connecter:", username);
        
        if (username) {
            // Enregistrer la d√©connexion
            logDisconnection(username);
            console.log("‚úÖ D√©connexion enregistr√©e pour:", username);
        }
        
        // R√©ponse de succ√®s
        ctx.response.status = 200;
        ctx.response.body = { 
            success: true, 
            message: `D√©connexion de ${username} enregistr√©e` 
        };
        
    } catch (error) {
        console.error("‚ùå Erreur logout:", error);
        ctx.response.status = 500;
        ctx.response.body = { error: "Erreur serveur" };
    }
});

// ===================== JOURNAL D'ACTIVITEES ====================

// Fonction pour journaliser les connexions
function logConnection(username) {
  const activity = {
    message: `${username} s'est connect√©`,
    type: "connection",
    timestamp: new Date()
  };
  
  activityLog.unshift(activity);
  
  // Garder seulement les 50 derni√®res entr√©es
  if (activityLog.length > 50) {
    activityLog.pop();
  }
  
  console.log(`[ACTIVITY] Connection: ${username} s'est connect√©`);
}


// Fonction pour journaliser les d√©connexions
function logDisconnection(username) {
    console.log("üî• === DEBUT logDisconnection ===");
    console.log("üë§ Username re√ßu:", username);
    console.log("üìä Taille du log avant:", activityLog.length);
    
    const activity = {
        message: `${username} s'est d√©connect√©`,
        type: "disconnection",
        timestamp: new Date().toISOString()
    };
    
    console.log("üìù Activit√© cr√©√©e:", activity);
    
    // Ajouter au d√©but du tableau
    activityLog.unshift(activity);
    
    console.log("üìä Taille du log apr√®s unshift:", activityLog.length);
    console.log("üìä Premi√®re entr√©e du log:", activityLog[0]);
    
    // Garder seulement les 50 derni√®res entr√©es
    if (activityLog.length > 50) {
        activityLog.pop();
        console.log("üìä Log tronqu√© √† 50 entr√©es");
    }
    
    console.log(`[ACTIVITY] Disconnection: ${username} s'est d√©connect√©`);
    console.log("üî• === FIN logDisconnection ===");
}


// ==================== ROUTES DU JEU ====================

// Mot al√©atoire
router.get("/api/random-word", async (ctx) => {
  try {
    if (!db.connected) await db.connect();
    
    // Cr√©er table words si n√©cessaire
    await db.queryObject(`
      CREATE TABLE IF NOT EXISTS words (
        id SERIAL PRIMARY KEY,
        word VARCHAR(50) NOT NULL,
        difficulty INTEGER DEFAULT 1,
        category VARCHAR(50),
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      )
    `);
    
    // Ajouter des mots par d√©faut si la table est vide
    const wordCount = await db.queryObject(`SELECT COUNT(*) FROM words`);
    if (parseInt(wordCount.rows[0].count) === 0) {
      await db.queryObject(`
        INSERT INTO words (word, difficulty, category) VALUES
        ('chat', 1, 'animaux'),
        ('chien', 1, 'animaux'),
        ('maison', 1, 'objets'),
        ('voiture', 2, 'objets'),
        ('soleil', 1, 'nature'),
        ('lune', 1, 'nature'),
        ('ordinateur', 2, 'technologie'),
        ('t√©l√©phone', 2, 'technologie')
      `);
    }
    
    const result = await db.queryObject(
      "SELECT word, difficulty, category FROM words ORDER BY RANDOM() LIMIT 1"
    );
    
    ctx.response.body = result.rows[0];
    
  } catch (error) {
    console.error("Erreur r√©cup√©ration mot:", error);
    // Fallback en cas d'erreur
    const words = [
      { word: "chat", difficulty: 1, category: "animaux" },
      { word: "maison", difficulty: 1, category: "objets" },
      { word: "voiture", difficulty: 2, category: "objets" }
    ];
    ctx.response.body = words[Math.floor(Math.random() * words.length)];
  }
});

// Fonction pour r√©cup√©rer l'ID utilisateur √† partir du username
async function getUserIdByUsername(username: string): Promise<number | null> {
    try {
        // ‚úÖ UTILISER la connexion DB existante au lieu d'en cr√©er une nouvelle
        // if (!db.connected) await db.connect(); // SUPPRIMER CETTE LIGNE
        
        console.log(`üîç Recherche de l'utilisateur: ${username}`);
        
        const result = await db.queryObject(
            "SELECT id FROM users WHERE username = $1",
            [username]
        );
        
        if (result.rows.length > 0) {
            console.log(`‚úÖ Utilisateur trouv√©: ${username} (ID: ${result.rows[0].id})`);
            return result.rows[0].id;
        }
        
        console.log(`‚ùå Utilisateur non trouv√©: ${username}`);
        return null;
    } catch (error) {
        console.error(`‚ùå Erreur r√©cup√©ration ID pour ${username}:`, error);
        return null;
    }
}


// Middleware simple pour v√©rifier les droits admin
async function verifyAdminMiddleware(username: string): Promise<boolean> {
    try {
        if (!db.connected) await db.connect();
        
        const userResult = await db.queryObject(
            "SELECT isadmin FROM users WHERE username = $1",
            [username]
        );
        
        return userResult.rows.length > 0 && userResult.rows[0].isadmin === true;
    } catch (error) {
        console.error("Erreur v√©rification admin:", error);
        return false;
    }
}
// Stats admin
router.get("/api/admin/stats", async (ctx) => {
    try {
        const adminUsername = ctx.request.headers.get('X-Admin-Username');
        
        if (!adminUsername || !(await verifyAdminMiddleware(adminUsername))) {
            ctx.response.status = 403;
            ctx.response.body = { error: "Droits administrateur requis" };
            return;
        }
        
        if (!db.connected) await db.connect();
        
        // Total utilisateurs
        const totalUsersResult = await db.queryObject("SELECT COUNT(*) as count FROM users");
        const totalUsers = Number(totalUsersResult.rows[0].count);
        
        // Total parties
        const totalGamesResult = await db.queryObject("SELECT COUNT(*) as count FROM games");
        const totalGames = Number(totalGamesResult.rows[0].count);
        
        // Parties aujourd'hui
        const gamesTodayResult = await db.queryObject(`
            SELECT COUNT(*) as count 
            FROM games 
            WHERE DATE(created_at) = CURRENT_DATE
        `);
        const gamesToday = Number(gamesTodayResult.rows[0].count);
        
        // Stats en temps r√©el du jeu actuel
        const activeGames = gameRoom.gameState !== 'waiting' ? 1 : 0;
        const activePlayers = gameRoom.players.size;
        
        const stats = {
            activeGames,
            activePlayers,
            totalUsers,
            gamesToday,
            totalGames,
            averageGameDuration: 8 // Exemple statique pour l'instant
        };
        
        ctx.response.body = { success: true, stats };
        
    } catch (error) {
        console.error("Erreur stats admin:", error);
        ctx.response.status = 500;
        ctx.response.body = { error: "Erreur serveur" };
    }
});

// Parties actives
router.get("/api/admin/active-games", async (ctx) => {
    try {
        const adminUsername = ctx.request.headers.get('X-Admin-Username');
        
        if (!adminUsername || !(await verifyAdminMiddleware(adminUsername))) {
            ctx.response.status = 403;
            ctx.response.body = { error: "Droits administrateur requis" };
            return;
        }
        
        const activeGames = [];
        
        // S'il y a une partie active
        if (gameRoom.players.size > 0) {
            const players = Array.from(gameRoom.players.values());
            const creator = gameRoom.gameCreator ? gameRoom.players.get(gameRoom.gameCreator) : null;
            
            activeGames.push({
                id: 1, // ID temporaire
                players: players.map(p => p.username),
                status: gameRoom.gameState,
                currentRound: gameRoom.currentRound,
                totalRounds: gameRoom.totalRounds,
                creator: creator?.username || 'Inconnu',
                startTime: new Date() // Approximation
            });
        }
        
        ctx.response.body = { success: true, games: activeGames };
        
    } catch (error) {
        console.error("Erreur parties actives:", error);
        ctx.response.status = 500;
        ctx.response.body = { error: "Erreur serveur" };
    }
});

// Joueurs actifs
router.get("/api/admin/active-players", async (ctx) => {
    try {
        const adminUsername = ctx.request.headers.get('X-Admin-Username');
        
        if (!adminUsername || !(await verifyAdminMiddleware(adminUsername))) {
            ctx.response.status = 403;
            ctx.response.body = { error: "Droits administrateur requis" };
            return;
        }
        
        const activePlayers = [];
        
        // R√©cup√©rer tous les joueurs connect√©s
        connectedClients.forEach((player, socket) => {
            activePlayers.push({
                id: player.userId || 0,
                username: player.username,
                currentGame: gameRoom.players.has(player.id) ? 1 : null,
                isPlaying: player.isDrawing || gameRoom.gameState === 'playing',
                connectedTime: new Date(Date.now() - Math.random() * 600000), // Approximation
                socketId: player.id
            });
        });
        
        ctx.response.body = { success: true, players: activePlayers };
        
    } catch (error) {
        console.error("Erreur joueurs actifs:", error);
        ctx.response.status = 500;
        ctx.response.body = { error: "Erreur serveur" };
    }
});

// Terminer une partie
router.post("/api/admin/games/:gameId/end", async (ctx) => {
    try {
        const adminUsername = ctx.request.headers.get('X-Admin-Username');
        
        if (!adminUsername || !(await verifyAdminMiddleware(adminUsername))) {
            ctx.response.status = 403;
            ctx.response.body = { error: "Droits administrateur requis" };
            return;
        }
        
        const gameId = parseInt(ctx.params.gameId);
        
        // Pour l'instant, on peut seulement terminer la partie active (ID = 1)
        if (gameId === 1 && gameRoom.players.size > 0) {
            endGame();
            
            // Notifier tous les joueurs
            broadcastMessage({
                type: 'adminAction',
                action: 'gameEnded',
                message: `Partie termin√©e par un administrateur`,
                admin: adminUsername
            });
            
            ctx.response.body = { 
                success: true, 
                message: `Partie #${gameId} termin√©e par l'admin` 
            };
        } else {
            ctx.response.status = 404;
            ctx.response.body = { error: "Partie non trouv√©e ou d√©j√† termin√©e" };
        }
        
    } catch (error) {
        console.error("Erreur terminer partie:", error);
        ctx.response.status = 500;
        ctx.response.body = { error: "Erreur serveur" };
    }
});

// Parties du jour
router.get("/api/admin/today-games", async (ctx) => {
    try {
        const adminUsername = ctx.request.headers.get('X-Admin-Username');
        
        if (!adminUsername || !(await verifyAdminMiddleware(adminUsername))) {
            ctx.response.status = 403;
            ctx.response.body = { error: "Droits administrateur requis" };
            return;
        }
        
        if (!db.connected) await db.connect();
        
        // R√©cup√©rer toutes les parties du jour
        const todayGamesResult = await db.queryObject(`
            SELECT g.id, g.created_at, g.finished_at, g.total_rounds,
                   uc.username as creator_username,
                   uw.username as winner_username,
                   (SELECT COUNT(*) FROM player_scores WHERE game_id = g.id) as player_count
            FROM games g
            LEFT JOIN users uc ON g.creator_id = uc.id
            LEFT JOIN users uw ON g.winner_id = uw.id
            WHERE DATE(g.created_at) = CURRENT_DATE
            ORDER BY g.created_at DESC
        `);
        
        const games = todayGamesResult.rows.map(game => ({
            id: Number(game.id),
            creator: game.creator_username,
            winner: game.winner_username,
            totalRounds: Number(game.total_rounds),
            playerCount: Number(game.player_count),
            createdAt: game.created_at,
            finishedAt: game.finished_at,
            duration: game.finished_at 
                ? Math.round((new Date(game.finished_at) - new Date(game.created_at)) / 60000)
                : null
        }));
        
        ctx.response.body = { success: true, games };
        
    } catch (error) {
        console.error("Erreur r√©cup√©ration parties du jour:", error);
        ctx.response.status = 500;
        ctx.response.body = { error: "Erreur serveur" };
    }
});

// Route API pour r√©cup√©rer le journal d'activit√©s - adapt√©e pour votre framework
router.get("/api/admin/activity-log", (ctx) => {
  console.log('üìú Journal d\'activit√©s demand√©');
  console.log('üìä Taille du journal:', activityLog.length);
  
  // Compter les types d'activit√©s
  const types = {};
  activityLog.forEach(a => {
    types[a.type] = (types[a.type] || 0) + 1;
  });
  console.log('üìä Types d\'activit√©s:', types);
  
  // V√©rifier la pr√©sence de d√©connexions
  const disconnections = activityLog.filter(a => a.type === 'disconnection');
  console.log('üî¥ Nombre de d√©connexions:', disconnections.length);
  ctx.response.headers.set("Content-Type", "application/json");
  ctx.response.body = activityLog;
});


// ==================== NOUVELLES ROUTES POUR LES STATS ====================

// Route pour r√©cup√©rer les statistiques d'un utilisateur
router.get("/api/user/:id/stats", async (ctx) => {
    try {
        const userId = parseInt(ctx.params.id);
        
        if (!db.connected) await db.connect();
        
        // R√©cup√©rer les stats
        const statsResult = await db.queryObject(`
            SELECT * FROM user_stats WHERE user_id = $1
        `, [userId]);
        
        if (statsResult.rows.length === 0) {
            // Si pas de stats, retourner des valeurs par d√©faut
            ctx.response.body = {
                games_played: 0,
                games_won: 0,
                best_score: 0,
                avg_score: 0,
                win_rate: 0
            };
        } else {
            const stats = statsResult.rows[0];
            const winRate = stats.games_played > 0 
                ? Math.round((stats.games_won / stats.games_played) * 100) 
                : 0;
            
            // Convertir les BigInt en Number
            ctx.response.body = {
                games_played: Number(stats.games_played),
                games_won: Number(stats.games_won),
                best_score: Number(stats.best_score),
                avg_score: Number(Math.round(stats.avg_score || 0)),
                win_rate: winRate,
                total_score: Number(stats.total_score),
                words_guessed: Number(stats.words_guessed || 0),
                words_drawn: Number(stats.words_drawn || 0)
            };
        }
        
    } catch (error) {
        console.error("Erreur r√©cup√©ration stats:", error);
        ctx.response.status = 500;
        ctx.response.body = { error: error.message };
    }
});

// Route pour r√©cup√©rer l'historique des parties d'un utilisateur (CORRIG√âE)
router.get("/api/user/:id/history", async (ctx) => {
    try {
        const userId = parseInt(ctx.params.id);
        const limit = parseInt(ctx.request.url.searchParams.get("limit") || "5");
        
        if (!db.connected) await db.connect();
        
        // R√©cup√©rer l'historique des parties
        const historyResult = await db.queryObject(`
            SELECT 
                g.id,
                g.created_at,
                g.total_rounds,
                ps.final_score,
                ps.position,
                (SELECT COUNT(*) FROM player_scores WHERE game_id = g.id) as total_players,
                CASE 
                    WHEN g.winner_id = $1 THEN true 
                    ELSE false 
                END as is_winner
            FROM games g
            JOIN player_scores ps ON g.id = ps.game_id
            WHERE ps.user_id = $1
            ORDER BY g.created_at DESC
            LIMIT $2
        `, [userId, limit]);
        
        // Convertir les BigInt en Number et formater les dates
        const history = historyResult.rows.map(row => ({
            id: Number(row.id),
            date: row.created_at,
            score: Number(row.final_score),
            position: Number(row.position),
            totalPlayers: Number(row.total_players),
            isWinner: row.is_winner,
            rounds: Number(row.total_rounds)
        }));
        
        ctx.response.body = { history };
        
    } catch (error) {
        console.error("Erreur r√©cup√©ration historique:", error);
        ctx.response.status = 500;
        ctx.response.body = { error: error.message };
    }
});

// Route pour r√©cup√©rer les d√©tails d'une partie sp√©cifique (CORRIG√âE)
router.get("/api/game/:id", async (ctx) => {
    try {
        const gameId = parseInt(ctx.params.id);
        
        if (!db.connected) await db.connect();
        
        // R√©cup√©rer les infos de la partie
        const gameResult = await db.queryObject(`
            SELECT g.*, u.username as creator_username, w.username as winner_username
            FROM games g
            LEFT JOIN users u ON g.creator_id = u.id
            LEFT JOIN users w ON g.winner_id = w.id
            WHERE g.id = $1
        `, [gameId]);
        
        if (gameResult.rows.length === 0) {
            ctx.response.status = 404;
            ctx.response.body = { error: "Partie non trouv√©e" };
            return;
        }
        
        // R√©cup√©rer tous les joueurs de cette partie
        const playersResult = await db.queryObject(`
            SELECT ps.*, u.username
            FROM player_scores ps
            JOIN users u ON ps.user_id = u.id
            WHERE ps.game_id = $1
            ORDER BY ps.position
        `, [gameId]);
        
        const game = gameResult.rows[0];
        const players = playersResult.rows;

        
        
        // Convertir les BigInt en Number
        ctx.response.body = {
            id: Number(game.id),
            creator: game.creator_username,
            winner: game.winner_username,
            total_rounds: Number(game.total_rounds),
            created_at: game.created_at,
            finished_at: game.finished_at,
            players: players.map(p => ({
                username: p.username,
                score: Number(p.final_score),
                position: Number(p.position),
                words_guessed: Number(p.words_guessed || 0),
                words_drawn: Number(p.words_drawn || 0)
            }))
        };
        
    } catch (error) {
        console.error("Erreur r√©cup√©ration partie:", error);
        ctx.response.status = 500;
        ctx.response.body = { error: error.message };
    }
});

// ==================== GESTION DES WEBSOCKETS ====================

// Fonction pour g√©rer les joueurs
async function handlePlayerJoin(socket: WebSocket, username: string, isGameCreator: boolean = false, totalRounds?: number) {
    console.log(`üîó Tentative de connexion: "${username}" (cr√©ateur: ${isGameCreator})`);
    
    // Nettoyer d'abord toutes les connexions ferm√©es
    cleanupClosedConnections();
    
    // V√©rifier si le joueur existe d√©j√† avec une connexion active
    let existingPlayer = null;
    let hasActiveConnection = false;
    
    // Parcourir tous les joueurs connect√©s
    connectedClients.forEach((player, sock) => {
        if (player.username === username) {
            if (sock.readyState === WebSocket.OPEN) {
                hasActiveConnection = true;
                existingPlayer = player;
            } else {
                // Connexion ferm√©e, la nettoyer
                console.log(`üßπ Nettoyage connexion ferm√©e pour ${username}`);
                connectedClients.delete(sock);
                gameRoom.players.delete(player.id);
            }
        }
    });
    
    // Si le joueur a une connexion active, refuser la nouvelle connexion
    if (hasActiveConnection && existingPlayer) {
        console.log(`‚ö†Ô∏è Joueur ${username} d√©j√† connect√© avec une connexion active`);
        socket.send(JSON.stringify({
            type: 'error',
            message: `Vous √™tes d√©j√† connect√© dans une autre fen√™tre`
        }));
        socket.close();
        return;
    }
    
    // Nettoyer tout r√©sidu du joueur dans gameRoom.players
    const playersToRemove = Array.from(gameRoom.players.values()).filter(p => p.username === username);
    playersToRemove.forEach(player => {
        console.log(`üßπ Suppression r√©sidu joueur ${username} (ID: ${player.id})`);
        gameRoom.players.delete(player.id);
    });
    
    // R√©cup√©rer le vrai ID utilisateur depuis la base de donn√©es
    let userId;
    try {
        userId = await getUserIdByUsername(username);
    } catch (error) {
        console.error(`‚ùå Erreur lors de la r√©cup√©ration de l'ID pour ${username}:`, error);
        userId = null;
    }
    
    // Cr√©er le nouveau joueur
    const playerId = crypto.randomUUID();
    const player: Player = {
        id: playerId,
        username: username,
        score: 0,
        isDrawing: false,
        userId: userId
    };
    
    // Ajouter le joueur
    connectedClients.set(socket, player);
    gameRoom.players.set(playerId, player);
    
    console.log(`‚úÖ Joueur connect√©: "${username}" (Socket ID: ${playerId})`);
    
    // ‚úÖ CORRECTION PRINCIPALE : Gestion prioritaire du cr√©ateur
    if (isGameCreator === true) {
        // Si quelqu'un arrive avec le flag cr√©ateur, il devient cr√©ateur m√™me si pas premier
        if (gameRoom.gameCreator && gameRoom.gameCreator !== playerId) {
            // Il y a d√©j√† un cr√©ateur, on le remplace
            const oldCreator = gameRoom.players.get(gameRoom.gameCreator);
            console.log(`üëë Remplacement du cr√©ateur: ${oldCreator?.username} ‚Üí ${username}`);
        }
        gameRoom.gameCreator = playerId;
        
        // Appliquer les param√®tres du cr√©ateur
        if (totalRounds && totalRounds > 0) {
            gameRoom.totalRounds = totalRounds;
        }
        console.log(`üëë ${username} est maintenant le cr√©ateur (explicite)`);
        
    } else if (!gameRoom.gameCreator) {
        // Seulement si aucun cr√©ateur n'est d√©fini
        gameRoom.gameCreator = playerId;
        console.log(`üëë ${username} devient le cr√©ateur (premier joueur, pas d'autre cr√©ateur)`);
    } else {
        // Ce joueur rejoint une partie existante
        const creator = gameRoom.players.get(gameRoom.gameCreator);
        console.log(`üë§ ${username} rejoint la partie de ${creator?.username}`);
    }
    
    // Afficher l'√©tat actuel avec indication du cr√©ateur
    console.log(`üìä Joueurs actuels (${gameRoom.players.size}):`);
    gameRoom.players.forEach(p => {
        const dbInfo = p.userId ? `DB ID: ${p.userId}` : 'Temporaire';
        const isCreator = p.id === gameRoom.gameCreator ? ' üëë CR√âATEUR' : '';
        console.log(`  - ${p.username}${isCreator} (${dbInfo})`);
    });
    
    // Envoyer l'√©tat complet √† tous les joueurs
    const gameState = {
        type: 'gameState',
        players: Array.from(gameRoom.players.values()),
        currentWord: null,
        currentDrawer: gameRoom.currentDrawer,
        gameState: gameRoom.gameState,
        timeLeft: gameRoom.timeLeft,
        totalRounds: gameRoom.totalRounds,
        currentRound: gameRoom.currentRound,
        creator: gameRoom.players.get(gameRoom.gameCreator)?.username // ‚úÖ AJOUT: Nom du cr√©ateur
    };
    
    // Envoyer √† tous les clients connect√©s
    broadcastMessage(gameState);
    
    // Notifier que le joueur a rejoint
    broadcastMessage({
        type: 'playerJoined',
        player: player
    });
    
    // D√©marrer le jeu si assez de joueurs
    checkAndStartGame();
}


// Fonction pour nettoyer les connexions ferm√©es
function cleanupClosedConnections() {
    const toRemove: { socket: WebSocket, player: Player }[] = [];
    
    // Identifier toutes les connexions ferm√©es
    connectedClients.forEach((player, socket) => {
        if (socket.readyState !== WebSocket.OPEN) {
            toRemove.push({ socket, player });
        }
    });
    
    // Supprimer les connexions ferm√©es
    toRemove.forEach(({ socket, player }) => {
        console.log(`üßπ Nettoyage connexion ferm√©e: ${player.username}`);
        connectedClients.delete(socket);
        gameRoom.players.delete(player.id);
    });
    
    // Si le cr√©ateur a √©t√© supprim√©, choisir un nouveau cr√©ateur
    if (gameRoom.gameCreator && !gameRoom.players.has(gameRoom.gameCreator)) {
        const remainingPlayers = Array.from(gameRoom.players.keys());
        if (remainingPlayers.length > 0) {
            gameRoom.gameCreator = remainingPlayers[0];
            const newCreator = gameRoom.players.get(gameRoom.gameCreator);
            console.log(`üëë Nouveau cr√©ateur: ${newCreator?.username}`);
        } else {
            gameRoom.gameCreator = null;
        }
    }
}

function handlePlayerLeave(socket: WebSocket) {
    const player = connectedClients.get(socket);
    if (!player) return;
    
    console.log(`üëã ${player.username} quitte la partie`);
    
    connectedClients.delete(socket);
    gameRoom.players.delete(player.id);
    
    // Si c'√©tait le cr√©ateur, choisir un nouveau cr√©ateur
    if (gameRoom.gameCreator === player.id) {
        const remainingPlayers = Array.from(gameRoom.players.keys());
        if (remainingPlayers.length > 0) {
            gameRoom.gameCreator = remainingPlayers[0];
            const newCreator = gameRoom.players.get(gameRoom.gameCreator);
            console.log(`üëë Nouveau cr√©ateur: ${newCreator?.username}`);
        } else {
            gameRoom.gameCreator = null;
        }
    }
    
    // Notifier les autres joueurs
    broadcastMessage({ 
        type: 'playerLeft', 
        playerId: player.id,
        username: player.username 
    });
    
    // Mettre √† jour la liste des joueurs pour tous
    broadcastMessage({
        type: 'gameState',
        players: Array.from(gameRoom.players.values()),
        currentWord: null,
        currentDrawer: gameRoom.currentDrawer,
        gameState: gameRoom.gameState,
        timeLeft: gameRoom.timeLeft,
        totalRounds: gameRoom.totalRounds,
        currentRound: gameRoom.currentRound
    });
    
    // Si le joueur qui part √©tait en train de dessiner, terminer le round
    if (player.isDrawing) {
        endRound();
    }
    
    // Si pas assez de joueurs, arr√™ter le jeu
    if (gameRoom.players.size < 2 && gameRoom.gameState === 'playing') {
        gameRoom.gameState = 'waiting';
        broadcastMessage({ 
            type: 'waitingForPlayers',
            message: 'En attente de plus de joueurs...' 
        });
    }
}

function handleChatMessage(socket: WebSocket, content: string) {
  const player = connectedClients.get(socket);
  if (!player) return;
  
  broadcastMessage({
    type: 'chat',
    sender: player.username,
    content: content
  });
}

function handleDrawData(socket: WebSocket, drawData: any) {
  const player = connectedClients.get(socket);
  if (!player || !player.isDrawing) return;
  
  broadcastMessage({ type: 'draw', drawData: drawData }, socket);
}

function handleGuess(socket: WebSocket, guess: string) {
  const player = connectedClients.get(socket);
  if (!player || !gameRoom.currentWord || player.isDrawing) return;
  
  if (guess.toLowerCase() === gameRoom.currentWord.toLowerCase()) {
    player.score += 100;
    
    broadcastMessage({
      type: 'correctGuess',
      winner: player.username,
      word: gameRoom.currentWord,
      scores: Array.from(gameRoom.players.values())
    });
    
    endRound();
  }
}

function handleRestartGame(socket: WebSocket) {
  const player = connectedClients.get(socket);
  if (!player) return;
  
  console.log(`Red√©marrage demand√© par ${player.username}`);
  
  // R√©initialiser le jeu
  gameRoom.players.forEach(p => {
    p.score = 0;
    p.isDrawing = false;
  });
  
  gameRoom.currentRound = 0;
  gameRoom.gameState = 'waiting';
  
  broadcastMessage({
    type: 'gameRestarting',
    message: 'La partie red√©marre...',
    players: Array.from(gameRoom.players.values()),
    closeGameOver: true
  });
  
  setTimeout(() => checkAndStartGame(), 2000);
}

// ==================== LOGIQUE DU JEU ====================

function broadcastMessage(message: any, excludeSocket?: WebSocket) {
    const messageStr = JSON.stringify(message);
    let sentCount = 0;
    
    connectedClients.forEach((player, socket) => {
        if (socket !== excludeSocket && socket.readyState === WebSocket.OPEN) {
            try {
                socket.send(messageStr);
                sentCount++;
            } catch (error) {
                console.error(`‚ùå Erreur envoi message √† ${player.username}:`, error);
            }
        }
    });
    
    console.log(`üì§ Message envoy√© √† ${sentCount} joueurs: ${message.type}`);
}

async function startNewRound() {
  if (gameRoom.players.size < 2) {
    gameRoom.gameState = 'waiting';
    gameRoom.currentWord = null;
    gameRoom.currentDrawer = null;
    broadcastMessage({ type: 'waitingForPlayers' });
    return;
  }
  
  if (gameRoom.currentRound > gameRoom.totalRounds) {
    endGame();
    return;
  }
  
  const players = Array.from(gameRoom.players.values());
  
  // Trouver le prochain dessinateur
  let currentIndex = -1;
  if (gameRoom.currentDrawer) {
    currentIndex = players.findIndex(p => p.id === gameRoom.currentDrawer);
  }
  
  const nextIndex = (currentIndex + 1) % players.length;
  const drawer = players[nextIndex];
  
  // CORRECTION: R√©initialiser TOUS les joueurs d'abord
  players.forEach(p => {
    p.isDrawing = false;
  });
  
  // Puis d√©finir le nouveau dessinateur
  drawer.isDrawing = true;
  
  try {
    // Obtenir un mot al√©atoire
    const response = await fetch(`http://localhost:${PORT}/api/random-word`);
    const wordData = await response.json();
    
    gameRoom.currentWord = wordData.word;
    gameRoom.currentDrawer = drawer.id;
    gameRoom.gameState = 'playing';
    gameRoom.timeLeft = 60;
    
    console.log(`üé® ${drawer.username} dessine le mot: ${gameRoom.currentWord}`);
    
    const isLastPlayer = gameRoom.currentRound === gameRoom.totalRounds && 
                        nextIndex === players.length - 1;
    
    // CORRECTION: Envoyer les donn√©es mises √† jour √† tous les clients
    connectedClients.forEach((player, socket) => {
      const isDrawer = player.id === drawer.id;
      socket.send(JSON.stringify({
        type: 'newRound',
        role: isDrawer ? 'drawer' : 'guesser',
        word: isDrawer ? gameRoom.currentWord : undefined,
        wordHint: isDrawer ? undefined : gameRoom.currentWord.replace(/[^ ]/g, '_'),
        timeLeft: gameRoom.timeLeft,
        drawer: drawer.username,
        drawerId: drawer.id, // NOUVEAU: Ajouter l'ID du dessinateur
        currentRound: gameRoom.currentRound,
        totalRounds: gameRoom.totalRounds,
        isLastPlayer,
        players: Array.from(gameRoom.players.values()) // IMPORTANT: Joueurs avec isDrawing mis √† jour
      }));
    });
    
    startRoundTimer();
  } catch (error) {
    console.error('Erreur d√©marrage round:', error);
  }
}

function startRoundTimer() {
  if (gameRoom.timerInterval) {
    clearInterval(gameRoom.timerInterval);
  }
  
  gameRoom.timerInterval = setInterval(() => {
    gameRoom.timeLeft--;
    
    if (gameRoom.timeLeft <= 0) {
      endRound();
    } else {
      broadcastMessage({ type: 'timeUpdate', timeLeft: gameRoom.timeLeft });
    }
  }, 1000);
}

function endRound() {
  if (gameRoom.timerInterval) {
    clearInterval(gameRoom.timerInterval);
  }
  
  gameRoom.gameState = 'roundEnd';
  
  const players = Array.from(gameRoom.players.values());
  const currentIndex = players.findIndex(p => p.id === gameRoom.currentDrawer);
  const isLastPlayerOfRound = currentIndex === players.length - 1;
  const isLastRound = gameRoom.currentRound >= gameRoom.totalRounds;
  
  broadcastMessage({
    type: 'roundEnd',
    word: gameRoom.currentWord,
    scores: Array.from(gameRoom.players.values()),
    isGameOver: isLastPlayerOfRound && isLastRound,
    isLastPlayerOfRound: isLastPlayerOfRound
  });
  
  setTimeout(() => {
    if (gameRoom.players.size < 2) {
      gameRoom.gameState = 'waiting';
      gameRoom.currentWord = null;
      gameRoom.currentDrawer = null;
      broadcastMessage({ type: 'waitingForPlayers' });
      return;
    }
    
    if (isLastPlayerOfRound && isLastRound) {
      endGame();
    } else if (isLastPlayerOfRound) {
      gameRoom.currentRound++;
      startNewRound();
    } else {
      startNewRound();
    }
  }, 5000);
}

function endGame() {
    if (gameRoom.timerInterval) {
        clearInterval(gameRoom.timerInterval);
    }
    
    // Sauvegarder la partie avant de la terminer
    saveGameResult(gameRoom);
    
    gameRoom.gameState = 'waiting';
    gameRoom.currentWord = null;
    gameRoom.currentDrawer = null;
    
    // Envoyer les scores finaux
    broadcastMessage({
        type: 'gameOver',
        finalScores: Array.from(gameRoom.players.values())
    });
    
    // R√©initialiser pour une nouvelle partie
    setTimeout(() => {
        gameRoom.currentRound = 0;
        // Pas besoin de r√©initialiser compl√®tement, 
        // les joueurs peuvent rester pour une nouvelle partie
    }, 2000);
}

function checkAndStartGame() {
    console.log(`üîç V√©rification d√©marrage: ${gameRoom.players.size} joueurs, √©tat: ${gameRoom.gameState}`);
    
    if (gameRoom.players.size >= 2 && gameRoom.gameState === 'waiting') {
        console.log("üöÄ D√©marrage du jeu...");
        gameRoom.currentRound = 1;
        
        // Notifier tous les joueurs que le jeu commence
        broadcastMessage({
            type: 'gameStarting',
            message: 'Le jeu commence dans 3 secondes...',
            players: Array.from(gameRoom.players.values())
        });
        
        // D√©marrer apr√®s 3 secondes
        setTimeout(() => {
            console.log("‚ñ∂Ô∏è Premier round");
            startNewRound();
        }, 3000);
    } else if (gameRoom.players.size < 2) {
        console.log("‚è≥ En attente de joueurs...");
        broadcastMessage({
            type: 'waitingForPlayers',
            message: 'En attente de plus de joueurs...'
        });
    }
}

// ==================== GESTIONNAIRE WEBSOCKET ====================

async function handleWS(req: Request) {
    if (req.headers.get("upgrade") !== "websocket") {
        return new Response("WebSocket required", { status: 400 });
    }
    
    const { socket, response } = Deno.upgradeWebSocket(req);
    
    socket.onopen = () => {
        console.log("Nouvelle connexion WebSocket");
    };
    
    socket.onmessage = async (e) => {
        try {
            const message = JSON.parse(e.data);
            console.log(`üì® Message re√ßu: ${message.type} de ${message.username || 'inconnu'}`);
            
            switch(message.type) {
                case 'join':
                    await handlePlayerJoin(socket, message.username, message.isGameCreator || false, message.totalRounds);
                    break;
                case 'chat':
                    handleChatMessage(socket, message.content);
                    break;
                case 'draw':
                    handleDrawData(socket, message.drawData);
                    break;
                case 'guess':
                    handleGuess(socket, message.guess);
                    break;
                case 'clearCanvas':
                    broadcastMessage({ type: 'clearCanvas' }, socket);
                    break;
                case 'restartGame':
                    handleRestartGame(socket);
                    break;
                case 'adminConnect':
                    console.log(`üõ°Ô∏è Admin connect√©: ${message.username}`);
                    socket.send(JSON.stringify({
                        type: 'adminConnected',
                        message: 'Connexion admin r√©ussie'
                    }));
                    break;
                case 'kickPlayer':
                    console.log(`üë¢ Admin kick: ${message.username}`);
                    // Trouver et d√©connecter le joueur
                    connectedClients.forEach((player, sock) => {
                        if (player.id === message.socketId) {
                            sock.close();
                            handlePlayerLeave(sock);
                        }
                    });
                    break;
                case 'kickAllPlayers':
                    console.log(`üë¢ Admin kick ALL players`);
                    connectedClients.forEach((player, sock) => {
                        if (sock !== socket) { // Ne pas d√©connecter l'admin
                            sock.close();
                        }
                    });
                    break;
                case 'endAllGames':
                    console.log(`üõë Admin end ALL games`);
                    if (gameRoom.players.size > 0) {
                        endGame();
                        broadcastMessage({
                            type: 'adminAction',
                            message: 'Toutes les parties ont √©t√© termin√©es par un administrateur'
                        });
                    }
                    break;
                default:
                    console.log(`‚ùì Type de message non g√©r√©: ${message.type}`);
            }
        } catch (err) {
            console.error("‚ùå Erreur traitement message:", err);
            // Envoyer une erreur au client
            socket.send(JSON.stringify({
                type: 'error',
                message: 'Erreur de traitement du message'
            }));
        }
    };
    
    socket.onclose = (event) => {
        console.log(`üîå Connexion ferm√©e (code: ${event.code})`);
        if (socket.username) {
            logDisconnection(socket.username);
        }
        handlePlayerLeave(socket);
    };
    
    socket.onerror = (error) => {
        console.error("‚ùå Erreur WebSocket:", error);
        handlePlayerLeave(socket);
    };
    
    return response;
}

// ==================== MIDDLEWARE ET CONFIGURATION ====================

// Middleware pour routes non trouv√©es
function notFoundHandler(ctx) {
  ctx.response.status = Status.NotFound;
  ctx.response.body = { error: "Route non trouv√©e" };
}

// Configuration du serveur
app.use(router.routes());
app.use(router.allowedMethods());
app.use(notFoundHandler);

// ==================== D√âMARRAGE DES SERVEURS ====================

app.addEventListener("listen", () => {
  console.log(`‚úÖ Serveur HTTP d√©marr√© sur http://localhost:${PORT}`);
});

console.log(`üîó Serveur WebSocket d√©marr√© sur ws://localhost:${WS_PORT}`);
serve(handleWS, { port: WS_PORT });

await app.listen({ port: PORT });

// ==================== FONCTIONS POUR SAUVEGARDER LES PARTIES ====================

// Fonction pour sauvegarder une partie
async function saveGameResult(gameRoom: GameRoom) {
    try {
        if (!db.connected) await db.connect();
        
        console.log("üíæ Sauvegarde de la partie...");
        
        // R√©cup√©rer l'ID utilisateur du cr√©ateur
        let creatorUserId = null;
        if (gameRoom.gameCreator) {
            const creator = gameRoom.players.get(gameRoom.gameCreator);
            if (creator && creator.userId) {
                creatorUserId = creator.userId;
            }
        }
        
        // 1. Cr√©er l'entr√©e de la partie
        const gameResult = await db.queryObject(`
            INSERT INTO games (creator_id, total_rounds, finished_at)
            VALUES ($1, $2, NOW())
            RETURNING id
        `, [
            creatorUserId,
            gameRoom.totalRounds
        ]);
        
        const gameId = gameResult.rows[0].id;
        console.log(`‚úÖ Partie cr√©√©e avec ID: ${gameId}`);
        
        // 2. Trier les joueurs par score
        const players = Array.from(gameRoom.players.values());
        const sortedPlayers = [...players].sort((a, b) => b.score - a.score);
        
        // 3. D√©terminer le gagnant
        const winner = sortedPlayers[0];
        if (winner.userId) {
            await db.queryObject(`
                UPDATE games SET winner_id = $1 WHERE id = $2
            `, [winner.userId, gameId]);
        }
        
        // 4. Sauvegarder les scores de chaque joueur
        for (let i = 0; i < sortedPlayers.length; i++) {
            const player = sortedPlayers[i];
            const position = i + 1;
            
            if (player.userId) {
                await db.queryObject(`
                    INSERT INTO player_scores (game_id, user_id, final_score, position)
                    VALUES ($1, $2, $3, $4)
                `, [
                    gameId,
                    player.userId,
                    player.score,
                    position
                ]);
                
                console.log(`‚úÖ Score sauv√©: ${player.username} - ${player.score} pts (${position}e)`);
            }
        }
        
        // 5. Mettre √† jour les statistiques des joueurs
        await updateUserStats(sortedPlayers);
        
        console.log("üéâ Partie sauvegard√©e avec succ√®s !");
        
    } catch (error) {
        console.error("‚ùå Erreur lors de la sauvegarde:", error);
    }
}

// Fonction pour mettre √† jour les statistiques utilisateur
async function updateUserStats(sortedPlayers: Player[]) {
    for (const player of sortedPlayers) {
        if (!player.userId) continue;
        
        try {
            const userId = player.userId;
            const isWinner = sortedPlayers[0].userId === player.userId;
            
            // R√©cup√©rer les stats actuelles
            const currentStats = await db.queryObject(`
                SELECT * FROM user_stats WHERE user_id = $1
            `, [userId]);
            
            if (currentStats.rows.length === 0) {
                // ‚úÖ CORRECTION: Forcer tous les types pour √©viter l'erreur PostgreSQL
                await db.queryObject(`
                    INSERT INTO user_stats (
                        user_id, games_played, games_won, total_score, 
                        best_score, avg_score, updated_at
                    ) VALUES ($1, $2, $3, $4, $5, $6, NOW())
                `, [
                    userId,                             // $1 - integer
                    1,                                 // $2 - integer (games_played)  
                    isWinner ? 1 : 0,                 // $3 - integer (games_won)
                    player.score,                     // $4 - integer (total_score)
                    player.score,                     // $5 - integer (best_score)
                    parseFloat(player.score.toFixed(2)) // $6 - ‚úÖ CORRECTION: Convertir en float
                ]);
                
                console.log(`‚úÖ Nouvelles stats cr√©√©es pour ${player.username}`);
            } else {
                // Mettre √† jour les stats existantes
                const stats = currentStats.rows[0];
                const newGamesPlayed = Number(stats.games_played) + 1;
                const newGamesWon = Number(stats.games_won) + (isWinner ? 1 : 0);
                const newTotalScore = Number(stats.total_score) + player.score;
                const newBestScore = Math.max(Number(stats.best_score), player.score);
                
                // ‚úÖ CORRECTION: Calculer la moyenne et la convertir en float
                const newAvgScore = parseFloat((newTotalScore / newGamesPlayed).toFixed(2));
                
                await db.queryObject(`
                    UPDATE user_stats SET
                        games_played = $1,
                        games_won = $2,
                        total_score = $3,
                        best_score = $4,
                        avg_score = $5,
                        updated_at = NOW()
                    WHERE user_id = $6
                `, [
                    newGamesPlayed,     // $1 - integer
                    newGamesWon,        // $2 - integer  
                    newTotalScore,      // $3 - integer
                    newBestScore,       // $4 - integer
                    newAvgScore,        // $5 - ‚úÖ CORRECTION: float au lieu de ::decimal
                    userId              // $6 - integer
                ]);
                
                console.log(`‚úÖ Stats mises √† jour pour ${player.username}`);
            }
            
        } catch (error) {
            console.error(`‚ùå Erreur mise √† jour stats pour ${player.username}:`, error);
        }
    }
}

console.log('üìã Routes enregistr√©es:');
router.routes().forEach((route, i) => {
  console.log(`Route ${i + 1}: ${route.method} ${route.path}`);
});